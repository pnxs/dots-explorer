name: Build

on: [push]

jobs:
  build:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Set up msbuild
        uses: microsoft/setup-msbuild@v2

      - name: 'Install Ninja'
        run: choco install ninja

      - uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0
        with:
          arch: amd64_x86

      - name: Upgrade pip
        run: pip install dots-code-generator

      - name: Install boost
        id: boost
        uses: egor-tensin/build-boost@v1
        with:
          version: 1.85.0
          libraries: filesystem
          platform: 'x64'
          configuration: 'Release'

      - name: Show paths
        run: |
          printf 'Boost has been unpacked to: %s\n' '${{ steps.boost.outputs.root }}'
          printf 'Libraries can be found here: %s\n' '${{ steps.boost.outputs.librarydir }}'
        shell: bash

      - name: 'Configure CMake'
        working-directory: ${{ github.workspace }}
        run: cmake -DBUILD_DOTS_SHARED=OFF -DBoost_USE_STATIC_LIBS=ON -D "BOOST_ROOT=${{ steps.boost.outputs.root }}" \
                   -D "BOOST_LIBRARYDIR=${{ steps.boost.outputs.librarydir }}"

      - name: 'Build'
        working-directory: ${{ github.workspace }}
        run: cmake --build out\build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the GitHub Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_DOTS_SHARED=OFF -DBoost_USE_STATIC_LIBS=ON

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE
